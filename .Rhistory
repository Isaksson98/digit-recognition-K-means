n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.25))
-id
View(data)
data = read.csv('optdigits.csv', header=TRUE)
head(data)
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.25))
data = read.csv('optdigits.csv')
head(data)
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.25))
data = read.csv('optdigits.csv')
spec = c(train = .6, test = .2, validate = .2)
g = sample(cut(
seq(nrow(df)),
nrow(df)*cumsum(c(0,spec)),
labels = names(spec)
))
res = split(df, g)
sapply(res, nrow)/nrow(df)
data = read.csv('optdigits.csv')
knearest=function(data,K,newdata) {
n1=dim(data)[1] # Number of data points in train data
n2=dim(newdata)[1] # Number of data points in test data
p=dim(data)[2] # Numbers of features/variables in each data point
Prob=numeric(n2) # Make a vector with the same dimension as number of test data points
X=as.matrix(data[,-p]) # Create new matrix from data, without last column
Y=as.matrix(newdata[,-p]) # Create new matrix from newdata, without last column
X=X/matrix(sqrt(rowSums(X^2)), nrow=n1, ncol=p-1)
Y=Y/matrix(sqrt(rowSums(Y^2)), nrow=n2, ncol=p-1)
C = X%*%t(Y)
M = matrix(1, nrow=dim(C)[1], ncol=dim(C)[2])
D = M - C
for (i in 1:n2 ){
row = D[,i]
minindices = which(row %in% sort(row)[1:K])
noOfOnes = 0
for (j in 1:length(minindices)){
if (data[minindices[j],p] == 1) {
noOfOnes = noOfOnes + 1
}
}
Prob[i] = noOfOnes/K
}
return(Prob)
}
#partition intotrain/valid/test
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
library(kknn)
############## K = 5 ##############
prob_K5 = knearest(train,5,test)
pred_K5 = numeric(length(prob_K5))
for (i in 1:length(prob_K5)){
if (prob_K5[i] > 0.5){
pred_K5[i] = 1
}
}
confusionMatrix_K5 = table(pred_K5, test[,49])
misclassification_rate_K5 = 1-sum(diag(confusionMatrix_K5)/sum(confusionMatrix_K5))
print("Confusion matrix K = 5")
print(confusionMatrix_K5)
print("Misclassification rate K = 5")
print(misclassification_rate_K5)
View(data)
View(data)
data.rows
data
library(kknn)
data = read.csv('optdigits.csv', header=FALSE)
#partition into train/valid/test
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
knn_v <- kknn(train=train, test=test, k=26)
library(kknn)
data = read.csv('optdigits.csv', header=FALSE)
#partition into train/valid/test
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
knn_v <- kknn(train=train, test=test, k=26)
library(kknn)
data = read.csv('optdigits.csv', header=FALSE)
###STEP 1 - partition into train/valid/test###
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
###STEP 2###
k = 30
res = kknn(formula = formula(train), train, test, na.action = na.omit(),
k = 30,  kernel = "rectangular", ykernel = NULL, scale=TRUE,
contrasts = c('unordered' = "contr.dummy", ordered = "contr.ordinal"))
library(kknn)
data = read.csv('optdigits.csv', header=FALSE)
###STEP 1 - partition into train/valid/test###
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
###STEP 2###
k = 30
res = kknn(formula = formula(train), train, test, na.action = na.omit(),
k = 30,  kernel = "rectangular", ykernel = NULL, scale=TRUE,
contrasts = c('unordered' = "contr.dummy", ordered = "contr.ordinal"))
res
library(kknn)
data = read.csv('optdigits.csv', header=FALSE)
###STEP 1 - partition into train/valid/test###
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
###STEP 2###
k = 30
res = kknn(formula = formula(train), train, test, na.action = na.omit(),
k = 30,  kernel = "rectangular", ykernel = NULL, scale=TRUE,
contrasts = c('unordered' = "contr.dummy", ordered = "contr.ordinal"))
summary(res)
library(kknn)
data = read.csv('optdigits.csv', header=FALSE)
###STEP 1 - partition into train/valid/test###
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
###STEP 2###
k = 30
res = kknn(formula = formula(train), train, test, na.action = na.omit(),
k = 30,  kernel = "rectangular")
summary(res)
library(kknn)
data = read.csv('optdigits.csv', header=FALSE)
###STEP 1 - partition into train/valid/test###
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
###STEP 2###
k = 30
res = kknn(train, test, k = 30,  kernel = "rectangular")
summary(res)
library(kknn)
data = read.csv('optdigits.csv', header=FALSE)
###STEP 1 - partition into train/valid/test###
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
###STEP 2###
res.knn.response = kknn(train, test, k = 30,  kernel = "rectangular")
summary(res.knn.response)
library(kknn)
data = read.csv('optdigits.csv', header=FALSE)
###STEP 1 - partition into train/valid/test###
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
###STEP 2###
kkn_model = kknn(train, test, k = 30,  kernel = "rectangular")
prediction = fitted(kkn_model)
library(kknn)
data = read.csv('optdigits.csv', header=FALSE)
###STEP 1 - partition into train/valid/test###
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
###STEP 2###
kkn_model = kknn(train, test, k = 30,  kernel = "rectangular")
prediction = (fitted(kkn_model))
library(kknn)
data = read.csv('optdigits.csv', header=FALSE)
###STEP 1 - partition into train/valid/test###
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
###STEP 2###
kkn_model = kknn(data = train, test, k = 30,  kernel = "rectangular")
prediction = (fitted(kkn_model))
library(kknn)
data = read.csv('optdigits.csv', header=FALSE)
###STEP 1 - partition into train/valid/test###
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
###STEP 2###
#Remove the label element 65 on each row
kkn_model = kknn(train, test, k = 30,  kernel = "rectangular")
tb <- table(kkn_model,test)
test[, -1]
View(test)
test[, 1]
test
test[, 1]
test[, -1]
test[, 1:64]
train[, 63:64]
train[, 65:65]
train[, 64:65]
train[, 65]
View(train)
library(kknn)
data = read.csv('optdigits.csv', header=FALSE)
###STEP 1 - partition into train/valid/test###
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
###STEP 2###
#Remove the label element 65 on each row
kkn_model = kknn(train[, 1:64], test[, 1:64],train[, 65], k = 30,  kernel = "rectangular")
tb <- table(kkn_model,test)
library(kknn)
data = read.csv('optdigits.csv', header=FALSE)
###STEP 1 - partition into train/valid/test###
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
###STEP 2###
#Remove the label element 65 on each row
kkn_model = kknn(train=train[, 1:64], test=test[, 1:64], cl=train[, 65], k = 30,  kernel = "rectangular")
tb <- table(kkn_model,test)
library(kknn)
data = read.csv('optdigits.csv', header=FALSE)
###STEP 1 - partition into train/valid/test###
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
###STEP 2###
#Remove the label element 65 on each row
kkn_model = kknn(train=train[, 1:64], test=test[, 1:64], cl=train[, 65], k=30,  kernel="rectangular")
library(kknn)
data = read.csv('optdigits.csv', header=FALSE)
###STEP 1 - partition into train/valid/test###
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
###STEP 2###
#Remove the label element 65 on each row
kkn_model = kknn(train=train[, 1:64], test=test[, 1:64], cl=train[, 65], k=30,  kernel="rectangular")
library(kknn)
data = read.csv('optdigits.csv', header=FALSE)
###STEP 1 - partition into train/valid/test###
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
###STEP 2###
#Remove the label element 65 on each row
kkn_model = knn(train=train[, 1:64], test=test[, 1:64], cl=train[, 65], k=30,  kernel="rectangular")
library(kknn)
data = read.csv('optdigits.csv', header=FALSE)
###STEP 1 - partition into train/valid/test###
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
###STEP 2###
#Remove the label element 65 on each row
kkn_model = kknn(formula = formula(train[, 1:64]), test=test[, 1:64], cl=train[, 65], k=30,  kernel="rectangular")
kkn_model = kknn(formula = formula(train),train, test, k=30,  kernel="rectangular")
library(kknn)
data = read.csv('optdigits.csv', header=FALSE)
###STEP 1 - partition into train/valid/test###
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
###STEP 2###
#Remove the label element 65 on each row
test_data=test[, 1:64]
train_data=train[, 1:64]
train_labels=train[, 65]
kkn_model = kknn(formula = formula(train),train, test, k=30,  kernel="rectangular")
library(kknn)
data = read.csv('optdigits.csv', header=FALSE)
###STEP 1 - partition into train/valid/test###
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
###STEP 2###
#Remove the label element 65 on each row
test_data=test[, 1:64]
train_data=train[, 1:64]
train_labels=train[, 65]
kkn_model = kknn(formula = formula(train),train, test, k=30,  kernel="rectangular")
summary(kkn_model)
library(kknn)
data = read.csv('optdigits.csv', header=FALSE)
###STEP 1 - partition into train/valid/test###
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
###STEP 2###
#Remove the label element 65 on each row
test_data=test[, 1:64]
train_data=train[, 1:64]
train_labels=train[, 65]
kkn_model = kknn(formula = formula(train),train, test, k=30,  kernel="rectangular")
summary(kkn_model)
fit <- fitted(kkn_model)
library(kknn)
data = read.csv('optdigits.csv', header=FALSE)
###STEP 1 - partition into train/valid/test###
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
###STEP 2###
#Remove the label element 65 on each row
test_data=test[, 1:64]
train_data=train[, 1:64]
train_labels=train[, 65]
kkn_model = kknn(formula = formula(train),train, test, k=30,  kernel="rectangular")
head(kkn_model)
library(kknn)
data = read.csv('optdigits.csv', header=FALSE)
###STEP 1 - partition into train/valid/test###
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
###STEP 2###
#Remove the label element 65 on each row
test_data=test[, 1:64]
train_data=train[, 1:64]
train_labels=train[, 65]
kkn_model = kknn(formula = formula(train),train, test, k=30,  kernel="rectangular")
confusionMatrix(kkn_model)["table"]
library(kknn)
library(caret)
data = read.csv('optdigits.csv', header=FALSE)
###STEP 1 - partition into train/valid/test###
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
###STEP 2###
#Remove the label element 65 on each row
test_data=test[, 1:64]
train_data=train[, 1:64]
train_labels=train[, 65]
kkn_model = kknn(formula = formula(train),train, test, k=30,  kernel="rectangular")
confusionMatrix(kkn_model)["table"]
