#train_labels=train[, 65]
train_labels=as.factor(train$V65)
test_labels=as.factor(test$V65)
kknn_model_train = kknn(formula=train_labels~., test=test, train=train, k=30, kernel="rectangular")
kknn_model_test = kknn(formula=test_labels~., test=test, train=test, k=30, kernel="rectangular")
fit_train <- fitted(kknn_model_train)
conf_matrix_train = table(fit_train, test_labels)
fit_test <- fitted(kknn_model_test)
conf_matrix_test = table(fit_test, test_labels)
conf_matrix_train
conf_matrix_test
cfm <- confusionMatrix(fit_train, test_labels)
cfm
missclass=function(X,X1){
n=length(X)
return(1-sum(diag(table(X,X1)))/n)
}
missclass(fit_train, test_labels)
missclass_rate_train = 1-sum(diag(conf_matrix_train)/sum(conf_matrix_train))
missclass_rate_test = 1-sum(diag(conf_matrix_test)/sum(conf_matrix_test))
missclass_rate_train
num4 = mean(fit_train != test_labels)
num4
###STEP 3###
list_of_8 = kknn_model_train$prob[,9]
num = sort(list_of_8, decreasing = FALSE)
num1 = 14
imge=train_data[num1,]
d <- matrix(imge, nrow = 8, byrow = TRUE)
y = matrix(as.numeric(d), nrow = 8)
heatmap(y, Colv=NA, Rowv=NA)
imge2=train[num1,]
imge2$V65
library(kknn)
library(caret)
data = read.csv('optdigits.csv', header=FALSE)
###STEP 1 - partition into train/valid/test###
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
###STEP 2###
#Remove the label element 65 on each row
test_data=test[, 1:64]
train_data=train[, 1:64]
#train_labels=train[, 65]
train_labels=as.factor(train$V65)
test_labels=as.factor(test$V65)
kknn_model_train = kknn(formula=train_labels~., test=test, train=train, k=30, kernel="rectangular")
kknn_model_test = kknn(formula=test_labels~., test=test, train=test, k=30, kernel="rectangular")
fit_train <- fitted(kknn_model_train)
conf_matrix_train = table(fit_train, test_labels)
fit_test <- fitted(kknn_model_test)
conf_matrix_test = table(fit_test, test_labels)
conf_matrix_train
conf_matrix_test
cfm <- confusionMatrix(fit_train, test_labels)
cfm
missclass=function(X,X1){
n=length(X)
return(1-sum(diag(table(X,X1)))/n)
}
missclass(fit_train, test_labels)
missclass_rate_train = 1-sum(diag(conf_matrix_train)/sum(conf_matrix_train))
missclass_rate_test = 1-sum(diag(conf_matrix_test)/sum(conf_matrix_test))
missclass_rate_train
num4 = mean(fit_train != test_labels)
num4
###STEP 3###
list_of_8 = kknn_model_train$prob[,9]
list_of_8
num = sort(list_of_8, decreasing = FALSE)
num1 = 14
imge=train_data[num1,]
d <- matrix(imge, nrow = 8, byrow = TRUE)
y = matrix(as.numeric(d), nrow = 8)
heatmap(y, Colv=NA, Rowv=NA)
imge2=train[num1,]
imge2$V65
library(kknn)
library(caret)
data = read.csv('optdigits.csv', header=FALSE)
###STEP 1 - partition into train/valid/test###
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
###STEP 2###
#Remove the label element 65 on each row
test_data=test[, 1:64]
train_data=train[, 1:64]
#train_labels=train[, 65]
train_labels=as.factor(train$V65)
test_labels=as.factor(test$V65)
kknn_model_train = kknn(formula=train_labels~., test=test, train=train, k=30, kernel="rectangular")
kknn_model_test = kknn(formula=test_labels~., test=test, train=test, k=30, kernel="rectangular")
fit_train <- fitted(kknn_model_train)
conf_matrix_train = table(fit_train, test_labels)
fit_test <- fitted(kknn_model_test)
conf_matrix_test = table(fit_test, test_labels)
conf_matrix_train
conf_matrix_test
cfm <- confusionMatrix(fit_train, test_labels)
cfm
missclass=function(X,X1){
n=length(X)
return(1-sum(diag(table(X,X1)))/n)
}
missclass(fit_train, test_labels)
missclass_rate_train = 1-sum(diag(conf_matrix_train)/sum(conf_matrix_train))
missclass_rate_test = 1-sum(diag(conf_matrix_test)/sum(conf_matrix_test))
missclass_rate_train
num4 = mean(fit_train != test_labels)
num4
###STEP 3###
list_of_8 = kknn_model_train$prob
list_of_8
num = sort(list_of_8, decreasing = FALSE)
num1 = 14
imge=train_data[num1,]
d <- matrix(imge, nrow = 8, byrow = TRUE)
y = matrix(as.numeric(d), nrow = 8)
heatmap(y, Colv=NA, Rowv=NA)
imge2=train[num1,]
imge2$V65
for(i in 1:30){
i
}
for(i in 1:30){
imge2$V65
}
for(i in 1:30){
+   imge2$V65
+
+ }
for(i in 1:30){
print(i)
}
library(kknn)
library(caret)
data = read.csv('optdigits.csv', header=FALSE)
###STEP 1 - partition into train/valid/test###
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
###STEP 2###
#Remove the label element 65 on each row
test_data=test[, 1:64]
train_data=train[, 1:64]
#train_labels=train[, 65]
train_labels=as.factor(train$V65)
test_labels=as.factor(test$V65)
kknn_model_train = kknn(formula=train_labels~., test=test, train=train, k=30, kernel="rectangular")
kknn_model_test = kknn(formula=test_labels~., test=test, train=test, k=30, kernel="rectangular")
fit_train <- fitted(kknn_model_train)
conf_matrix_train = table(fit_train, test_labels)
fit_test <- fitted(kknn_model_test)
conf_matrix_test = table(fit_test, test_labels)
conf_matrix_train
conf_matrix_test
cfm <- confusionMatrix(fit_train, test_labels)
cfm
missclass=function(X,X1){
n=length(X)
return(1-sum(diag(table(X,X1)))/n)
}
missclass(fit_train, test_labels)
missclass_rate_train = 1-sum(diag(conf_matrix_train)/sum(conf_matrix_train))
missclass_rate_test = 1-sum(diag(conf_matrix_test)/sum(conf_matrix_test))
missclass_rate_train
num4 = mean(fit_train != test_labels)
num4
###STEP 3###
list_of_8 = kknn_model_train$prob
list_of_8
num = sort(list_of_8, decreasing = FALSE)
num1 = 14
imge=train_data[num1,]
d <- matrix(imge, nrow = 8, byrow = TRUE)
y = matrix(as.numeric(d), nrow = 8)
heatmap(y, Colv=NA, Rowv=NA)
imge2=train[num1,]
imge2$V65
###STEP 4###
m <- vector("integer", x)
for(k in 1:30){
kknn_model_loop = kknn(formula=train_labels~., test=test, train=train, k=k, kernel="rectangular")
fit_train_loop <- fitted(kknn_model_train)
m[k] <- missclass(fit_train_loop, test_labels)
}
m
library(kknn)
library(caret)
data = read.csv('optdigits.csv', header=FALSE)
###STEP 1 - partition into train/valid/test###
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
###STEP 2###
#Remove the label element 65 on each row
test_data=test[, 1:64]
train_data=train[, 1:64]
#train_labels=train[, 65]
train_labels=as.factor(train$V65)
test_labels=as.factor(test$V65)
kknn_model_train = kknn(formula=train_labels~., test=test, train=train, k=30, kernel="rectangular")
kknn_model_test = kknn(formula=test_labels~., test=test, train=test, k=30, kernel="rectangular")
fit_train <- fitted(kknn_model_train)
conf_matrix_train = table(fit_train, test_labels)
fit_test <- fitted(kknn_model_test)
conf_matrix_test = table(fit_test, test_labels)
conf_matrix_train
conf_matrix_test
cfm <- confusionMatrix(fit_train, test_labels)
cfm
missclass=function(X,X1){
n=length(X)
return(1-sum(diag(table(X,X1)))/n)
}
missclass(fit_train, test_labels)
missclass_rate_train = 1-sum(diag(conf_matrix_train)/sum(conf_matrix_train))
missclass_rate_test = 1-sum(diag(conf_matrix_test)/sum(conf_matrix_test))
missclass_rate_train
num4 = mean(fit_train != test_labels)
num4
###STEP 3###
list_of_8 = kknn_model_train$prob
list_of_8
num = sort(list_of_8, decreasing = FALSE)
num1 = 14
imge=train_data[num1,]
d <- matrix(imge, nrow = 8, byrow = TRUE)
y = matrix(as.numeric(d), nrow = 8)
heatmap(y, Colv=NA, Rowv=NA)
imge2=train[num1,]
imge2$V65
###STEP 4###
m <- vector("integer", 30)
for(k in 1:30){
kknn_model_loop = kknn(formula=train_labels~., test=test, train=train, k=k, kernel="rectangular")
fit_train_loop <- fitted(kknn_model_train)
m[k] <- missclass(fit_train_loop, test_labels)
}
m
###STEP 4###
m <- vector("integer", 30)
for(k in 1:30){
kknn_model_loop = kknn(formula=train_labels~., test=test, train=train, k=k, kernel="rectangular")
fit_train_loop <- fitted(kknn_model_loop)
m[k] <- missclass(fit_train_loop, test_labels)
}
m
plot(1:30, m, type='1', col='orange', main='title',
xlab='K', ylab='Missclass_err')
plot( m, type='1', col='orange', main='title',
xlab='K', ylab='Missclass_err')
library(kknn)
library(caret)
data = read.csv('optdigits.csv', header=FALSE)
###STEP 1 - partition into train/valid/test###
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
###STEP 2###
#Remove the label element 65 on each row
test_data=test[, 1:64]
train_data=train[, 1:64]
#train_labels=train[, 65]
train_labels=as.factor(train$V65)
test_labels=as.factor(test$V65)
kknn_model_train = kknn(formula=train_labels~., test=test, train=train, k=30, kernel="rectangular")
kknn_model_test = kknn(formula=test_labels~., test=test, train=test, k=30, kernel="rectangular")
fit_train <- fitted(kknn_model_train)
conf_matrix_train = table(fit_train, test_labels)
fit_test <- fitted(kknn_model_test)
conf_matrix_test = table(fit_test, test_labels)
conf_matrix_train
conf_matrix_test
cfm <- confusionMatrix(fit_train, test_labels)
cfm
missclass=function(X,X1){
n=length(X)
return(1-sum(diag(table(X,X1)))/n)
}
missclass(fit_train, test_labels)
missclass_rate_train = 1-sum(diag(conf_matrix_train)/sum(conf_matrix_train))
missclass_rate_test = 1-sum(diag(conf_matrix_test)/sum(conf_matrix_test))
missclass_rate_train
num4 = mean(fit_train != test_labels)
num4
###STEP 3###
list_of_8 = kknn_model_train$prob
list_of_8
num = sort(list_of_8, decreasing = FALSE)
num1 = 14
imge=train_data[num1,]
d <- matrix(imge, nrow = 8, byrow = TRUE)
y = matrix(as.numeric(d), nrow = 8)
heatmap(y, Colv=NA, Rowv=NA)
imge2=train[num1,]
imge2$V65
###STEP 4###
m <- vector("integer", 30)
for(k in 1:30){
kknn_model_loop = kknn(formula=train_labels~., test=test, train=train, k=k, kernel="rectangular")
fit_train_loop <- fitted(kknn_model_loop)
m[k] <- missclass(fit_train_loop, test_labels)
}
plot( m, type='1', col='orange', main='title',
xlab='K', ylab='Missclass_err')
library(kknn)
library(caret)
data = read.csv('optdigits.csv', header=FALSE)
###STEP 1 - partition into train/valid/test###
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
###STEP 2###
#Remove the label element 65 on each row
test_data=test[, 1:64]
train_data=train[, 1:64]
#train_labels=train[, 65]
train_labels=as.factor(train$V65)
test_labels=as.factor(test$V65)
kknn_model_train = kknn(formula=train_labels~., test=test, train=train, k=30, kernel="rectangular")
kknn_model_test = kknn(formula=test_labels~., test=test, train=test, k=30, kernel="rectangular")
fit_train <- fitted(kknn_model_train)
conf_matrix_train = table(fit_train, test_labels)
fit_test <- fitted(kknn_model_test)
conf_matrix_test = table(fit_test, test_labels)
conf_matrix_train
conf_matrix_test
cfm <- confusionMatrix(fit_train, test_labels)
cfm
missclass=function(X,X1){
n=length(X)
return(1-sum(diag(table(X,X1)))/n)
}
missclass(fit_train, test_labels)
missclass_rate_train = 1-sum(diag(conf_matrix_train)/sum(conf_matrix_train))
missclass_rate_test = 1-sum(diag(conf_matrix_test)/sum(conf_matrix_test))
missclass_rate_train
num4 = mean(fit_train != test_labels)
num4
###STEP 3###
list_of_8 = kknn_model_train$prob
list_of_8
num = sort(list_of_8, decreasing = FALSE)
num1 = 14
imge=train_data[num1,]
d <- matrix(imge, nrow = 8, byrow = TRUE)
y = matrix(as.numeric(d), nrow = 8)
heatmap(y, Colv=NA, Rowv=NA)
imge2=train[num1,]
imge2$V65
###STEP 4###
m <- vector("integer", 30)
for(k in 1:30){
kknn_model_loop = kknn(formula=train_labels~., test=test, train=train, k=k, kernel="rectangular")
fit_train_loop <- fitted(kknn_model_loop)
m[k] <- missclass(fit_train_loop, test_labels)
}
plot( m, type='1', col='orange', main='title',
xlab='K', ylab='Missclass_err')
plot( m, type='1', col='orange', main='title',
xlab='K', ylab='Missclass_err')
plot( m, type='1', col='orange', main='title',
xlab='K', ylab='Missclass_err')
plot( m, type='l', col='orange', main='title',
xlab='K', ylab='Missclass_err')
library(kknn)
library(caret)
data = read.csv('optdigits.csv', header=FALSE)
###STEP 1 - partition into train/valid/test###
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.4))
train=data[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.3))
valid=data[id2,]
id3=setdiff(id1,id2)
test=data[id3,]
###STEP 2###
#Remove the label element 65 on each row
test_data=test[, 1:64]
train_data=train[, 1:64]
#train_labels=train[, 65]
train_labels=as.factor(train$V65)
test_labels=as.factor(test$V65)
kknn_model_train = kknn(formula=train_labels~., test=test, train=train, k=30, kernel="rectangular")
kknn_model_test = kknn(formula=test_labels~., test=test, train=test, k=30, kernel="rectangular")
fit_train <- fitted(kknn_model_train)
conf_matrix_train = table(fit_train, test_labels)
fit_test <- fitted(kknn_model_test)
conf_matrix_test = table(fit_test, test_labels)
conf_matrix_train
conf_matrix_test
cfm <- confusionMatrix(fit_train, test_labels)
cfm
missclass=function(X,X1){
n=length(X)
return(1-sum(diag(table(X,X1)))/n)
}
missclass(fit_train, test_labels)
missclass_rate_train = 1-sum(diag(conf_matrix_train)/sum(conf_matrix_train))
missclass_rate_test = 1-sum(diag(conf_matrix_test)/sum(conf_matrix_test))
missclass_rate_train
num4 = mean(fit_train != test_labels)
num4
###STEP 3###
list_of_8 = kknn_model_train$prob
list_of_8
num = sort(list_of_8, decreasing = FALSE)
num1 = 14
imge=train_data[num1,]
d <- matrix(imge, nrow = 8, byrow = TRUE)
y = matrix(as.numeric(d), nrow = 8)
heatmap(y, Colv=NA, Rowv=NA)
imge2=train[num1,]
imge2$V65
###STEP 4###
m <- vector("integer", 30)
for(k in 1:30){
kknn_model_loop = kknn(formula=train_labels~., test=test, train=train, k=k, kernel="rectangular")
fit_train_loop <- fitted(kknn_model_loop)
m[k] <- missclass(fit_train_loop, test_labels)
}
plot( m, type='l', col='orange', main='title',
xlab='K', ylab='Missclass_err')
m <- vector("integer", 30)
s <- vector("integer", 30)
for(k in 1:30){
kknn_model_loop_m = kknn(formula=train_labels~., test=test, train=train, k=k, kernel="rectangular")
fit_train_loop_m <- fitted(kknn_model_loop_m)
m[k] <- missclass(fit_train_loop_m, test_labels)
kknn_model_loop_s = kknn(formula=train_labels~., test=test, train=train, k=k, kernel="rectangular")
fit_train_loop_s <- fitted(kknn_model_loop_s)
s[k] <- missclass(fit_train_loop_s, test_labels)
}
plot( m, type='l', col='orange', main='title',
xlab='K', ylab='Missclass_err')
lines( s, col='blue')
m <- vector("integer", 30)
s <- vector("integer", 30)
for(k in 1:30){
kknn_model_loop_m = kknn(formula=train_labels~., test=test, train=train, k=k, kernel="rectangular")
fit_train_loop_m <- fitted(kknn_model_loop_m)
m[k] <- missclass(fit_train_loop_m, test_labels)
kknn_model_loop_s = kknn(formula=test_labels~., test=test, train=test, k=k, kernel="rectangular")
fit_train_loop_s <- fitted(kknn_model_loop_s)
s[k] <- missclass(fit_train_loop_s, test_labels)
}
plot( m, type='l', col='orange', main='title',
xlab='K', ylab='Missclass_err')
lines( s, col='blue')
s
m <- vector("integer", 60)
s <- vector("integer", 60)
for(k in 1:60){
kknn_model_loop_m = kknn(formula=train_labels~., test=test, train=train, k=k, kernel="rectangular")
fit_train_loop_m <- fitted(kknn_model_loop_m)
m[k] <- missclass(fit_train_loop_m, test_labels)
kknn_model_loop_s = kknn(formula=test_labels~., test=test, train=test, k=k, kernel="rectangular")
fit_train_loop_s <- fitted(kknn_model_loop_s)
s[k] <- missclass(fit_train_loop_s, test_labels)
}
s
plot( m, type='l', col='orange', main='Errors on test data',
xlab='K', ylab='Missclass_err')
lines( s, col='blue')
